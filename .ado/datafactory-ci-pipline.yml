name: datafactory-ci-pipeline-$(rev:r)

trigger:
  # none
  branches:
    include:
      - 'develop'
  paths:
    include:
      - $(FACTORY_GIT_ROOT_FOLDER)/*

# pr: # PRトリガーはAzure Reposの場合、branch policyで実装します。https://docs.microsoft.com/ja-jp/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&tabs=yaml#pr-triggers
  # branches:
  #   include:
  #     - 'main'
  #     - 'release/*'


variables:
  - template: ../config-devops-dev.yml

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Build
    jobs:
      - job: Build
        displayName: "Build of ADF"
        steps:
          # Installs Node and the npm packages saved in your package.json file in the build
          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'
            displayName: 'Install Node.js'

          - task: Npm@1
            inputs:
              command: 'install'
              workingDir: '$(Build.Repository.LocalPath)/packages' #replace with the package.json folder
              verbose: true
            displayName: 'Install npm package'
          # Validates all of the Data Factory resources in the repository. You'll get the same validation errors as when "Validate All" is selected.
          # Enter the appropriate subscription and name for the source factory.

          - task: Npm@1
            inputs:
              command: 'custom'
              workingDir: '$(Build.Repository.LocalPath)/packages' #replace with the package.json folder
              customCommand: 'run build export $(Build.Repository.LocalPath)/$(FACTORY_GIT_ROOT_FOLDER) $(SOURCE_FACTORY_RESOURCE_ID)'
            displayName: 'Validate'

          # Validate and then generate the ARM template into the destination folder, which is the same as selecting "Publish" from the UX.
          # The ARM template generated isn't published to the live version of the factory. Deployment should be done by using a CI/CD pipeline. 

          - task: Npm@1
            inputs:
              command: 'custom'
              workingDir: '$(Build.Repository.LocalPath)/packages' #replace with the package.json folder
              customCommand: 'run build export $(Build.Repository.LocalPath)/$(FACTORY_GIT_ROOT_FOLDER) $(SOURCE_FACTORY_RESOURCE_ID) "ArmTemplate"'
            displayName: 'Validate and Generate ARM template'

          - bash: ls packages/ArmTemplate
          
          - task: CopyFiles@2
            displayName: 'Copy Files to:  $(build.artifactstagingdirectory)'
            inputs:
              Contents: |
                packages/ArmTemplate/**
                params*.json
              flattenFolders: true
              TargetFolder: ' $(build.artifactstagingdirectory)'

          - publish: ' $(build.artifactstagingdirectory)'
            displayName: 'Publish datafactory'
            artifact: 'DatafactoryArmTemplates'

  - stage: Deploy
    jobs:
    - template: templates/jobs/datafactory-deploy.yml
      parameters:
        ENVIRONMENT_NAME: 'dev'
        PREPOSTSCRIPT_FILEPATH: "DatafactoryArmTemplates/PrePostDeploymentScript.ps1"
        PARAMETER_FILEPATH: "DatafactoryArmTemplates/params_dev.json"
        DEPLOY_FILEPATH: "DatafactoryArmTemplates/ARMTemplateForFactory.json"
        RESTART_TRIGGER: false


